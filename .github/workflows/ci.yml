name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

  workflow_dispatch:

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y \
            git gcc cmake make libev-dev openssl libssl-dev systemd libsystemd-dev \
            libyaml-dev python3-docutils libatomic1 zlib1g zlib1g-dev \
            libzstd-dev liblz4-dev bzip2 libbz2-dev pandoc texlive-base \
            texlive-latex-recommended texlive-fonts-recommended texlive-extra-utils \
            texlive-xetex texlive-fonts-extra wget graphviz doxygen \
            check curl \
            gcovr

      - name: Install PostgreSQL
        run: |
          sudo apt install curl ca-certificates
          sudo install -d /usr/share/postgresql-common/pgdg
          sudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc
          sudo sh -c 'echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt update
          sudo apt install -y postgresql-17

      - name: Set Env Path Variable
        run: |
          echo "PATH=$PATH:/usr/lib/postgresql/17/bin" >> $GITHUB_ENV
          echo $PATH

      - name: Install Eisvogel template for Pandoc
        run: |
              wget https://github.com/Wandmalfarbe/pandoc-latex-template/releases/download/v3.2.0/Eisvogel-3.2.0.tar.gz
              tar -xzf Eisvogel-3.2.0.tar.gz
              mkdir -p ~/.local/share/pandoc/templates
              mv Eisvogel-3.2.0/eisvogel.latex ~/.local/share/pandoc/templates/

      - name: Build Project
        run: |
              mkdir build
              cd build
              if [ "${{ matrix.compiler }}" = "gcc" ]; then
                export CC=/usr/bin/gcc
              else
                export CC=/usr/bin/clang
              fi

              cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..
              make -j$(nproc)
        working-directory: /home/runner/work/pgexporter/pgexporter/

      - name: Run Tests
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ] && [ "${{ matrix.build_type }}" = "Debug" ]; then
            ASAN_LIB=$(gcc -print-file-name=libasan.so)
            export LD_PRELOAD=$ASAN_LIB
            export ASAN_OPTIONS=detect_leaks=0,verify_asan_link_order=0
          fi
          $(which bash) ./testsuite.sh
        working-directory: /home/runner/work/pgexporter/pgexporter/build

      # === Generate coverage reports ===
      - name: Generate Detailed HTML Coverage Report
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        uses: threeal/gcovr-action@v1.1.0
        with:
          root: /home/runner/work/pgexporter/pgexporter
          html-details: true
          html-out: coverage.html

      - name: Generate Cobertura Report
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        uses: threeal/gcovr-action@v1.1.0
        with:
          xml-out: cobertura.xml

      - name: Generate Coveralls JSON Report and Upload
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        uses: threeal/gcovr-action@v1.1.0
        with:
          root: /home/runner/work/pgexporter/pgexporter
          coveralls-out: coveralls.json

      - name: Bundle All Coverage Reports
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        run: |
          mkdir -p coverage-report
          mv *.html coverage-report/
          mv cobertura.xml coverage-report/
          mv coveralls.json coverage-report/

      - name: Upload All Coverage Reports as Artifact
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: coverage-report
          retention-days: 90

      - name: Upload Build and Run Logs as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: /home/runner/work/pgexporter/pgexporter/build/log
          retention-days: 90

      - name: Upload Generated Documentation Artifact
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: generated-docs
          path: /home/runner/work/pgexporter/pgexporter/build/doc
          retention-days: 90

#  build-macos:
#    runs-on: macos-latest
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Detect Homebrew prefix
#        id: brew-prefix
#        run: |
#          echo "HOMEBREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
#          echo "ARCH=$(uname -m)" >> $GITHUB_ENV
#          if [ "$(uname -m)" = "arm64" ]; then
#            echo "Using Apple Silicon (M1/M2) configuration with Homebrew at /opt/homebrew"
#          else
#            echo "Using Intel configuration with Homebrew at /usr/local"
#          fi
#
#      - name: Install dependencies
#        run: |
#          brew update
#          brew upgrade
#          brew install libev zstd lz4 bzip2 graphviz doxygen libyaml cmake docutils check pkg-config curl
#          brew link --force bzip2
#          brew link --force zstd
#          brew link --force lz4
#
#      - name: Install PostgreSQL
#        run: |
#          brew install postgresql@17
#          echo "$(brew --prefix postgresql@17)/bin" >> $GITHUB_PATH
#
#      - name: Debug Build
#        run: |
#          mkdir -p build
#          cd build
#          export CC=/usr/bin/clang
#
#          cmake -DCMAKE_BUILD_TYPE=Debug .. \
#            -DCMAKE_PREFIX_PATH="$HOMEBREW_PREFIX" \
#            -DCMAKE_INCLUDE_PATH="$HOMEBREW_PREFIX/include" \
#            -DCMAKE_LIBRARY_PATH="$HOMEBREW_PREFIX/lib"
#
#          make
#
#      - name: Run Tests (Debug)
#        run: |
#          cd build
#          $(which bash) ./testsuite.sh
#
#      - name: Upload pgexporter log
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: pgexporter-log-macos
#          path: build/log/pgexporter.log
#          retention-days: 7
#
#      - name: Release Build
#        run: |
#          rm -rf build
#          mkdir -p build
#          cd build
#          export CC=/usr/bin/clang
#
#          cmake -DCMAKE_BUILD_TYPE=Release .. \
#            -DCMAKE_C_FLAGS='-D_DARWIN_C_SOURCE' \
#            -DCMAKE_PREFIX_PATH="$HOMEBREW_PREFIX" \
#            -DCMAKE_INCLUDE_PATH="$HOMEBREW_PREFIX/include" \
#            -DCMAKE_LIBRARY_PATH="$HOMEBREW_PREFIX/lib"
#
#          make

  build-freebsd:
    runs-on: ubuntu-latest
    name: FreeBSD Build and Test
    timeout-minutes: 30
    strategy:
      matrix:
        compiler: [clang]
        build_type: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Install QEMU dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qemu-system-x86 \
            qemu-utils \
            libvirt-daemon-system \
            libvirt-clients \
            bridge-utils
          sudo systemctl start libvirtd

      - name: Setup FreeBSD VM
        uses: vmactions/freebsd-vm@v1
        id: freebsd-vm
        with:
          release: "14.3"
          usesh: true
          envs: "PATH,GITHUB_ENV,GITHUB_WORKSPACE,GITHUB_OUTPUT"
          mem: 6144
          sync: rsync
          copyback: true
          prepare: |
            ASSUME_ALWAYS_YES=yes pkg bootstrap
            pkg update
            pkg upgrade -y
            pkg install -y \
              bash \
              sudo \
              libev \
              cmake \
              llvm11 \
              postgresql17-server \
              postgresql17-contrib \
              zstd \
              liblz4 \
              bzip2 \
              libssh \
              libyaml \
              libarchive \
              check \
              py311-docutils \
              curl \
              doxygen \
              hs-pandoc \
              texlive-base \
              texlive-texmf \
              graphviz \
              pkgconf
            dot -c

      - name: Build Project
        shell: freebsd {0}
        run: |
          mkdir -p $GITHUB_WORKSPACE/build
          cd $GITHUB_WORKSPACE/build
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} "$GITHUB_WORKSPACE"
          make -j$(sysctl -n hw.ncpu)

      - name: Run Tests
        shell: freebsd {0}
        run: |
          cd ${GITHUB_WORKSPACE}/build
          bash ./testsuite.sh

      - name: Upload pgexporter log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pgexporter-log-freebsd-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: ${GITHUB_WORKSPACE}/build/log/pgexporter.log
          retention-days: 7
