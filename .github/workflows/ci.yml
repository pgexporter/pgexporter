name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

  workflow_dispatch:

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y \
            git gcc cmake make libev-dev openssl libssl-dev systemd libsystemd-dev \
            libyaml-dev python3-docutils libatomic1 zlib1g zlib1g-dev \
            libzstd-dev liblz4-dev bzip2 libbz2-dev pandoc texlive-base \
            texlive-latex-recommended texlive-fonts-recommended texlive-extra-utils \
            texlive-xetex texlive-fonts-extra wget graphviz doxygen \
            check curl \
            gcovr

      - name: Install PostgreSQL
        run: |
          sudo apt install curl ca-certificates
          sudo install -d /usr/share/postgresql-common/pgdg
          sudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc
          sudo sh -c 'echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt update
          sudo apt install -y postgresql-17

      - name: Set Env Path Variable
        run: |
          echo "PATH=$PATH:/usr/lib/postgresql/17/bin" >> $GITHUB_ENV
          echo $PATH

      - name: Install Eisvogel template for Pandoc
        run: |
              wget https://github.com/Wandmalfarbe/pandoc-latex-template/releases/download/v3.2.0/Eisvogel-3.2.0.tar.gz
              tar -xzf Eisvogel-3.2.0.tar.gz
              mkdir -p ~/.local/share/pandoc/templates
              mv Eisvogel-3.2.0/eisvogel.latex ~/.local/share/pandoc/templates/

      - name: Build Project
        run: |
              mkdir build
              cd build
              if [ "${{ matrix.compiler }}" = "gcc" ]; then
                export CC=/usr/bin/gcc
              else
                export CC=/usr/bin/clang
              fi

              cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -Dcheck=ON ..
              make -j$(nproc)
        working-directory: /home/runner/work/pgexporter/pgexporter/

      - name: Run Tests
        run: |
          if [ "${{ matrix.build_type }}" = "Debug" ]; then
            $(which bash) ./test/check.sh ci
          fi
        working-directory: /home/runner/work/pgexporter/pgexporter/

      # === Generate coverage reports ===
      - name: Generate Detailed HTML Coverage Report
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        uses: threeal/gcovr-action@v1.1.0
        with:
          root: /home/runner/work/pgexporter/pgexporter
          html-details: true
          html-out: coverage.html

      - name: Generate Cobertura Report
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        uses: threeal/gcovr-action@v1.1.0
        with:
          xml-out: cobertura.xml

      - name: Generate Coveralls JSON Report and Upload
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        uses: threeal/gcovr-action@v1.1.0
        with:
          root: /home/runner/work/pgexporter/pgexporter
          coveralls-out: coveralls.json

      - name: Bundle All Coverage Reports
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        run: |
          mkdir -p coverage-report
          mv *.html coverage-report/
          mv cobertura.xml coverage-report/
          mv coveralls.json coverage-report/

      - name: Upload All Coverage Reports as Artifact
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Debug'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: coverage-report
          retention-days: 90

      - name: Upload Build and Run Logs as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: /tmp/pgexporter-test/log
          retention-days: 90

      - name: Upload Generated Documentation Artifact
        if: matrix.compiler == 'gcc' && matrix.build_type == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: generated-docs
          path: /home/runner/work/pgexporter/pgexporter/build/doc
          retention-days: 90

  build-macos:
    runs-on: macos-latest
    env:
      PGEXPORTER_ROOT: ${{ github.workspace }}
      BUILD_DIR: ${{ github.workspace }}/build
      POSTGRESQL_VERSION: "@17"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - name: Install dependencies
        run: |
          brew update
          brew install \
            libev \
            libyaml \
            docutils \
            check \
            postgresql${POSTGRESQL_VERSION} \
            curl
      - name: Add PostgreSQL to PATH
        run: |
          echo "$(brew --prefix postgresql${POSTGRESQL_VERSION})/bin" >> $GITHUB_PATH
      - name: Build with Clang
        run: |
          mkdir -p $BUILD_DIR
          cd $BUILD_DIR
          export CC=$(xcrun -find clang)
          cmake -DCMAKE_BUILD_TYPE=Debug -DDOCS=FALSE ..
          make -j$(sysctl -n hw.ncpu)

      - name: Show logs on failure
        if: failure()
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          cat ./log/pgexporter.log || echo "pgexporter.log not found"

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-logs
          path: |
            ${{ env.BUILD_DIR }}/log/
            /tmp/*.log
          retention-days: 7

      - name: Upload Generated Documentation Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-generated-docs
          path: ${{ env.BUILD_DIR }}/doc/
          retention-days: 7
